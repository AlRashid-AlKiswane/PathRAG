"""
Application configuration module.

This module defines the `Settings` class to centralize application configuration
parameters loaded from environment variables or a `.env` file. It uses Pydantic's
`BaseSettings` for validation and management of typed settings.

Features include:
- Database configuration
- Document chunking parameters
- Model and generation settings
- System resource monitoring thresholds
- Semantic graph path scoring parameters

The `get_settings` function loads and validates settings, ensuring required
directories exist and providing robust error handling.

Usage:
    from src.helpers.settings import get_settings

    settings = get_settings()
    print(settings.SQLITE_DB)
"""

import os
import sys
import logging
from pathlib import Path
from typing import List, Union, Optional
from pydantic import Field, ValidationError
from pydantic_settings import BaseSettings, SettingsConfigDict

class Settings(BaseSettings):
    """
    Application configuration settings.

    Loads configuration values from environment variables and optionally from a `.env` file.
    Provides validation and type checking for all application parameters.

    Attributes:
        FILE_TYPES (List[str]): Allowed file types for document processing.
        DOC_LOCATION_STORE (Path): Directory path where documents are stored.
        CHUNKS_SIZE (int): Max characters per document chunk.
        CHUNKS_OVERLAP (int): Overlapping characters between chunks.
        EMBEDDING_MODEL (str): Name of sentence embedding model.
        EMBEDDING_DIM (int): Dimension of embedding vectors.
        OLLAMA_EMBED_MODL (str): Ollama embedding model identifier.
        OLLAMA_MODEL (str): Ollama LLM model identifier.
        MAX_NEW_TOKENS (int): Max tokens generated by model.
        MAX_INPUT_TOKENS (int): Max tokens allowed in input prompt.
        TEMPERATURE (float): Generation randomness control.
        TOP_K (int): Token sampling top-k cutoff.
        TOP_P (float): Token sampling top-p cutoff.
        CPU_THRESHOLD (float): CPU usage alert threshold.
        MEMORY_THRESHOLD (float): Memory usage alert threshold.
        DISK_THRESHOLD (float): Disk usage alert threshold.
        GPUs_THRESHOLD (float): GPU usage alert threshold.
        MONITOR_INTERVAL (int): Seconds between resource monitoring checks.
        DECAY_RATE (float): Decay rate for semantic graph path scoring.
        PRUNE_THRESH (float): Threshold to prune low-scoring semantic paths.
        SIM_THRESHOLD (float): Similarity threshold for candidate filtering.
    """

    # -----------------------------
    # Database Configuration
    # -----------------------------
    MONGO_USE_LOCAL: bool = Field(..., env="MONGO_USE_LOCAL")
    MONGO_LOCAL_URI: str = Field(..., env="MONGO_LOCAL_URI")
    MONGO_REMOTE_URI: Optional[str] = Field(default=None, env="MONGO_REMOTE_URI")
    MONGO_ENABLE_WEBUI: bool = Field(..., env="MONGO_ENABLE_WEBUI")
    # -----------------------------
    # Document Handling
    # -----------------------------
    FILE_TYPES: List[str] = Field(
        default_factory=lambda: ["text", "pdf"],
        env="FILE_TYPES",
        description="Allowed file types for upload and processing."
    )

    DOC_LOCATION_STORE: Path = Field(
        default=Path("./assets/docs"),
        env="DOC_LOCATION_STORE",
        description="Directory where uploaded documents will be stored."
    )

    CHUNKS_SIZE: int = Field(
        default=500,
        gt=100,
        lt=2000,
        env="CHUNKS_SIZE",
        description="Maximum number of characters in each text chunk."
    )

    CHUNKS_OVERLAP: int = Field(
        default=30,
        ge=0,
        lt=100,
        env="CHUNKS_OVERLAP",
        description="Number of overlapping characters between consecutive chunks."
    )

    DOCLING_ARTIFACTS_PATH: str = Field(..., env="DOCLING_ARTIFACTS_PATH")
    # -----------------------------
    # Model Configuration
    # -----------------------------
    EMBEDDING_MODEL: str = Field(
        default="all-MiniLM-L6-v2",
        env="EMBEDDING_MODEL",
        description="Model name used for generating sentence embeddings."
    )

    EMBEDDING_DIM: int = Field(
        default=384,
        env="EMBEDDING_DIM",
        description="Embedding vector dimensionality (e.g., 384 for MiniLM)."
    )

    OLLAMA_EMBED_MODL: str = Field(
        default="all-minilm:l6-v2",
        env="OLLAMA_EMBED_MODL",
        description="Model used by Ollama for embedding generation."
    )

    OLLAMA_MODEL: str = Field(
        default="gemma3:1b",
        env="OLLAMA_MODEL",
        description="Ollama model name for large language model (LLM) inference."
    )

    # -----------------------------
    # Generation Parameters
    # -----------------------------
    MAX_NEW_TOKENS: int = Field(
        default=256,
        ge=10,
        lt=1024,
        env="MAX_NEW_TOKENS",
        description="Maximum number of new tokens the model is allowed to generate."
    )

    MAX_INPUT_TOKENS: int = Field(
        default=1024,
        ge=100,
        lt=4096,
        env="MAX_INPUT_TOKENS",
        description="Maximum number of tokens allowed in the input prompt."
    )

    TEMPERATURE: float = Field(
        default=0.7,
        ge=0.0,
        le=1.0,
        env="TEMPERATURE",
        description="Controls randomness in generation; higher values = more random."
    )

    TOP_K: int = Field(
        default=40,
        ge=1,
        le=100,
        env="TOP_K",
        description="Limits token sampling to the top-K most likely options."
    )

    TOP_P: float = Field(
        default=0.95,
        ge=0.0,
        le=1.0,
        env="TOP_P",
        description="Top-p (nucleus) sampling probability mass cutoff."
    )

    # -----------------------------
    # System Monitoring Thresholds
    # -----------------------------
    CPU_THRESHOLD: float = Field(
        default=0.95,
        ge=0.0,
        le=1.0,
        env="CPU_THRESHOLD",
        description="CPU usage threshold for triggering alerts or scaling."
    )

    MEMORY_THRESHOLD: float = Field(
        default=0.95,
        ge=0.0,
        le=1.0,
        env="MEMORY_THRESHOLD",
        description="Memory usage threshold for monitoring."
    )

    DISK_THRESHOLD: float = Field(
        default=0.95,
        ge=0.0,
        le=1.0,
        env="DISK_THRESHOLD",
        description="Disk usage threshold for storage alerts."
    )

    GPUs_THRESHOLD: float = Field(
        default=0.95,
        ge=0.0,
        le=1.0,
        env="GPUs_THRESHOLD",
        description="GPU usage threshold for scaling or warning."
    )

    MONITOR_INTERVAL: int = Field(
        default=60,
        ge=5,
        le=3600,
        env="MONITOR_INTERVAL",
        description="Interval (in seconds) between monitoring checks."
    )

    # -----------------------------
    # Semantic Graph Path Scoring
    # -----------------------------
    DECAY_RATE: float = Field(
        default=0.8,
        ge=0.1,
        le=0.9999,
        env="DECAY_RATE",
        description="Decay rate used for path scoring. Controls how much weight decays across longer paths."
    )

    PRUNE_THRESH: float = Field(
        default=0.5,
        ge=0.1,
        le=0.9999,
        env="PRUNE_THRESH",
        description="Threshold used to prune low-scoring paths in the semantic graph."
    )

    SIM_THRESHOLD: float = Field(
        default=0.4,
        ge=0.1,
        le=0.9999,
        env="SIM_THRESHOLD",
        description="Similarity threshold for filtering node connections or candidate nodes."
    )

    # Pydantic Settings metadata
    model_config = SettingsConfigDict(
        env_file=".env",
        env_file_encoding="utf-8",
        extra="forbid"  # Forbid unknown environment variables
    )

    STORGE_GRAPH: str = Field(..., env="STORGE_GRAPH")


def get_settings() -> Settings:
    """
    Load and validate the application settings from environment or `.env` file.

    Ensures that:
    - All required environment variables are loaded and validated according to their types and constraints.
    - The document storage directory exists or is created on disk.
    - Any validation or filesystem errors are logged and cause program exit.

    Returns:
        Settings: A validated `Settings` instance with all configuration values.

    Raises:
        SystemExit: Exits with status code 1 if validation or directory creation fails.
    """
    try:
        settings = Settings()

        # Ensure document storage directory exists
        settings.DOC_LOCATION_STORE.mkdir(parents=True, exist_ok=True)

        logging.info("Loaded application settings successfully.")
        return settings

    except ValidationError as ve:
        logging.critical("Configuration validation failed:\n%s", ve.json(indent=2))
        sys.exit(1)

    except OSError as oe:
        logging.critical("Filesystem setup error: %s", oe)
        sys.exit(1)
